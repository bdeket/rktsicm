#lang scribble/manual

@(require (for-syntax racket/base)
          "helpers.rkt"
          (for-label sicm/kernel/structs))

@title[#:tag "kernel/structs"]{Structs}
@defmodule[sicm/kernel/structs #:packages ("rktsicm")]

@deftempproc*[
 *allowing-incompatible-multiplication*
 *careful-conversion*
 2-down?
 2-tensor?
 2-up?
 A^m_n->Mmn
 A^mn->Mmn
 A_m^n->Mnm
 A_mn->Mnm
 Mmn->A^m_n
 Mmn->A^mn
 Mnm->A_m^n
 Mnm->A_mn
 abstract-down
 abstract-up
 ac:zero-like
 ar:zero-like
 as-matrix
 as:arity
 compatible-shape
 compatible-zero
 down
 down->vector
 down-of-ups?
 dual-zero
 flip-indices
 flip-outer-index
 list->up-structure
 literal-down
 literal-up
 m->s
 make-down-combination
 make-up-combination
 matrix->structure
 rexists
 s->m
 s:->vector
 s:abs
 s:apply
 s:arity
 s:binary
 s:compatible-elements?
 s:compatible-for-contraction?
 s:conjugate
 s:contract
 s:determinant
 s:dimension
 s:divide-by-structure
 s:dot-product
 s:elementwise
 s:forall
 s:foreach
 s:fringe
 s:generate
 s:inexact?
 s:inverse
 s:inverse1
 s:invert
 s:length
 s:magnitude
 s:map
 s:map-chain
 s:map/l
 s:map/r
 s:map/r/l
 s:multiply
 s:negate
 s:opposite
 s:outer-product
 s:partial-derivative
 s:ref
 s:same
 s:select
 s:solve-linear-left
 s:solve-linear-right
 s:square
 s:structure
 s:subst
 s:subst-internal
 s:trace
 s:transpose
 s:transpose-outer
 s:transpose1
 s:type
 s:unary
 s:with-substituted-coord
 s:zero-like
 s:zero?
 sc:type-predicate
 scalar*structure
 scalar/tensor
 single-layer-down?
 single-layer-up?
 sr:type-predicate
 structs:assign-operations
 structure*scalar
 structure+structure
 structure->access-chains
 structure->matrix
 structure->prototype
 structure-structure
 structure/scalar
 structure:elementwise
 structure:expt
 structure=structure
 submatrix
 typical-object
 ultra-flatten
 ultra-unflatten
 up
 up->vector
 up-of-downs?
 up-structure->list
 vector->down
 vector->up]